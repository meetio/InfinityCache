<?php
namespace Meetio\InfinityCache;

use Illuminate\Cache\TaggableStore;
use Illuminate\Contracts\Cache\Repository;
use Illuminate\Database\Eloquent\Model as EloquentModel;

abstract class Model extends EloquentModel
{
    /**
     * @var Repository
     */
    private $cache;

    /**
     * Create a new Eloquent model instance.
     *
     * @param  array $attributes
     */
    public function __construct(array $attributes = [])
    {
        $this->setCacheRepository(app('cache.store'));

        parent::__construct($attributes); // TODO: Change the autogenerated stub
    }

    /**
     * @param Repository $repository
     * @throws \Exception
     */
    private function setCacheRepository(Repository $repository)
    {
        if (! $repository->getStore() instanceof TaggableStore) {
            throw new \Exception('Cache driver must be extended from Illuminate\Cache\TaggableStore ');
        }

        $this->cache = $repository;
    }

    /**
     * @{@inheritdoc}
     */
    public function newBaseQueryBuilder()
    {
        $conn = $this->getConnection();
        $grammar = $conn->getQueryGrammar();

        return new Builder(
            $this->cache,
            $conn, $grammar,
            $conn->getPostProcessor(),
            $this->generateCacheTag()
        );
    }

    public static function boot()
    {
        parent::boot();

        self::saved(function ($model) {
            $model->clearCache();
        });

        self::deleted(function ($model) {
            $model->clearCache();
        });

    }

    /**
     * Clear cached queries
     * @return void
     */
    protected function clearCache()
    {
        $this->cache->tags($this->generateCacheTag())->flush();
    }

    /**
     * Get hashed class name
     * @return string
     */
    public function generateCacheTag()
    {
        return md5(get_called_class());
    }

}